#import nacessery libraries
from pathlib import Path
from PIL import Image
import sys
import logging

from luma.core import cmdline, error

def get_device(actual_args=None):

    if actual_args is None:
        actual_args = sys.argv[1:] 
    parser = cmdline.create_parser(description='luma.examples arguments') 
    args = parser.parse_args(actual_args)

    if args.config:
        config = cmdline.load_config(args.config) 
        args = parser.parse_args(config + actual_args)

    try:
        device = cmdline.create_device(args)# create device object
        print(display_settings(device, args)) #print device settings
        return device

    except error.Error as e:# error exception
        parser.error(e)
        return None

def display_settings(device, args):
    iface = ''
    display_types = cmdline.get_display_types() 
    # check if display type is supported
    if args.display not in display_types['emulator']:
        iface = 'Interface: {}\n'.format(args.interface)

    lib_name = cmdline.get_library_for_display_type(args.display)
    if lib_name is not None:
        lib_version = cmdline.get_library_version(lib_name)
    else:
        lib_name = lib_version = 'unknown'

    import luma.core
    #get device version info
    version = 'luma.{} {} (luma.core {})'.format(
        lib_name, lib_version, luma.core.__version__)
# return device information
    return 'Version: {}\nDisplay: {}\n{}Dimensions: {} x {}\n{}'.format(
        version, args.display, iface, device.width, device.height, '-' * 60)

def main():
    while True: 
        #convert the png image to PIL 1-bit image format 
        image = Image.open('sphx_glr_plot_001.png').resize((device.width, device.height), Image.ANTIALIAS).convert('1')
        device.clear() # clear the screen 
        device.display(image) # display the image on screen


if __name__ == "__main__": #check if is running from main function
    try:
        device = get_device() #get device settings, version, display width and height
        main() # run the main function
    except KeyboardInterrupt: #keyboard interupt exception
        pass
